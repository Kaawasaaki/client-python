#!/usr/bin/env python3
# -*- coding: utf-8 -*-
Added CLI argument parsing using argparse
Added duplicate checks for malware and labels
Added logging for better debugging
Improved maintainability and usability of the script


import argparse
import logging
import sys
from pycti import OpenCTIApiClient


logging.basicConfig(level=logging.INFO, format="%(levelname)s: %(message)s")

def main():
    
    parser = argparse.ArgumentParser(description="Add a label to a malware in OpenCTI.")
    parser.add_argument("--url", required=True, help="OpenCTI API URL")
    parser.add_argument("--token", required=True, help="OpenCTI API token")
    parser.add_argument("--malware", required=True, help="Malware name")
    parser.add_argument("--description", default="No description provided", help="Malware description")
    parser.add_argument("--label", required=True, help="Label value to add")
    parser.add_argument("--color", default="#ffa500", help="Label color (default: orange)")
    args = parser.parse_args()

    try:
        client = OpenCTIApiClient(args.url, args.token)

        
        existing_malware = client.malware.read(filters=[{"key": "name", "values": [args.malware]}])
        if existing_malware:
            logging.info(f"Malware '{args.malware}' already exists.")
            malware_id = existing_malware["id"]
        else:
            logging.info(f"Creating malware '{args.malware}'.")
            malware = client.malware.create(name=args.malware, description=args.description)
            malware_id = malware["id"]

        
        existing_label = client.label.read(filters=[{"key": "value", "values": [args.label]}])
        if existing_label:
            label_id = existing_label["id"]
            logging.info(f"Label '{args.label}' already exists.")
        else:
            logging.info(f"Creating label '{args.label}'.")
            label = client.label.create(value=args.label, color=args.color)
            label_id = label["id"]

        
        logging.info(f"Adding label '{args.label}' to malware '{args.malware}'.")
        client.stix_domain_object.add_label(id=malware_id, label_id=label_id)

        
        malware = client.malware.read(id=malware_id)
        logging.info("Updated Malware:")
        print(malware)

    except Exception as e:
        logging.error(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
